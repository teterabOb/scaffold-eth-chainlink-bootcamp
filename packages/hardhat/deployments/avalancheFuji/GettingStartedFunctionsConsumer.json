{
  "address": "0x6bB6Ae1D3D6072ab112063F54985793B5b6bBA0F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "character",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GREETING",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "character",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbc2f8c1aedee37cbc3ba8f1fa90d72616c7d7e0c6db26bb1578391b432c7859",
  "receipt": {
    "to": null,
    "from": "0x28090cE01DeC5850A5fb4774339697249b381829",
    "contractAddress": "0x6bB6Ae1D3D6072ab112063F54985793B5b6bBA0F",
    "transactionIndex": 1,
    "gasUsed": "2589134",
    "logsBloom": "0x
    "blockHash": "0x4df587bc0b79bdd3e9d73acea2a8342b38b6fa612c553b1fec14269f04a46bc4",
    "transactionHash": "0xbbc2f8c1aedee37cbc3ba8f1fa90d72616c7d7e0c6db26bb1578391b432c7859",
    "logs": [],
    "blockNumber": 31867182,
    "cumulativeGasUsed": "2770191",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "abd3687ea968ad4aa109c2f50dffe96b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"character\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GREETING\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"character\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract uses hardcoded values and should not be used in production.\",\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"sendRequest(uint64,string[])\":{\"params\":{\"args\":\"The arguments to pass to the HTTP request\",\"subscriptionId\":\"The ID for the Chainlink subscription\"},\"returns\":{\"requestId\":\"The ID of the request\"}}},\"title\":\"GettingStartedFunctionsConsumer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Initializes the contract with the Chainlink router address and sets the contract owner\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"sendRequest(uint64,string[])\":{\"notice\":\"Sends an HTTP request for character information\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"This is an example contract to show how to make HTTP requests using Chainlink\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GettingStartedFunctionsConsumer.sol\":\"GettingStartedFunctionsConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/GettingStartedFunctionsConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Deploy on Fuji\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\n/**\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/resources/link-token-contracts/\\n */\\n\\n/**\\n * @title GettingStartedFunctionsConsumer\\n * @notice This is an example contract to show how to make HTTP requests using Chainlink\\n * @dev This contract uses hardcoded values and should not be used in production.\\n */\\ncontract GettingStartedFunctionsConsumer is FunctionsClient, ConfirmedOwner {\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    string public constant GREETING = \\\"Desplegando nuestro contrato!\\\";\\n    // State variables to store the last request ID, response, and error\\n    bytes32 public s_lastRequestId;\\n    bytes public s_lastResponse;\\n    bytes public s_lastError;\\n\\n    // Custom error type\\n    error UnexpectedRequestID(bytes32 requestId);\\n\\n    // Event to log responses\\n    event Response(\\n        bytes32 indexed requestId,\\n        string character,\\n        bytes response,\\n        bytes err\\n    );\\n\\n    // Hardcoded for Fuji\\n    // Supported networks https://docs.chain.link/chainlink-functions/supported-networks\\n    address router = 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0;\\n    bytes32 donID =\\n        0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000;\\n\\n    //Callback gas limit\\n    uint32 gasLimit = 300000;\\n\\n    // JavaScript source code\\n    // Fetch character name from the Star Wars API.\\n    // Documentation: https://swapi.dev/documentation#people\\n    string source =\\n        \\\"const characterId = args[0];\\\"\\n        \\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\n        \\\"url: `https://swapi.dev/api/people/${characterId}/`\\\"\\n        \\\"});\\\"\\n        \\\"if (apiResponse.error) {\\\"\\n        \\\"throw Error('Request failed');\\\"\\n        \\\"}\\\"\\n        \\\"const { data } = apiResponse;\\\"\\n        \\\"return Functions.encodeString(data.name);\\\";\\n\\n    // State variable to store the returned character information\\n    string public character;\\n\\n    /**\\n     * @notice Initializes the contract with the Chainlink router address and sets the contract owner\\n     */\\n    constructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {}\\n\\n    /**\\n     * @notice Sends an HTTP request for character information\\n     * @param subscriptionId The ID for the Chainlink subscription\\n     * @param args The arguments to pass to the HTTP request\\n     * @return requestId The ID of the request\\n     */\\n    function sendRequest(\\n        uint64 subscriptionId,\\n        string[] calldata args\\n    ) external onlyOwner returns (bytes32 requestId) {\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code\\n        if (args.length > 0) req.setArgs(args); // Set the arguments for the request\\n\\n        // Send the request and store the request ID\\n        s_lastRequestId = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donID\\n        );\\n\\n        return s_lastRequestId;\\n    }\\n\\n    /**\\n     * @notice Callback function for fulfilling a request\\n     * @param requestId The ID of the request to fulfill\\n     * @param response The HTTP response data\\n     * @param err Any errors from the Functions request\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        if (s_lastRequestId != requestId) {\\n            revert UnexpectedRequestID(requestId); // Check if request IDs match\\n        }\\n        // Update the contract's state variables with the response and any errors\\n        s_lastResponse = response;\\n        character = string(response);\\n        s_lastError = err;\\n\\n        // Emit an event to log the response\\n        emit Response(requestId, character, s_lastResponse, s_lastError);\\n    }\\n}\",\"keccak256\":\"0x000b0d342afc4ded531b0c12dbf694e3370825833731b76c78c018b3a3dbd105\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405273a9d587a00a31a52ed70d6026794a8fc5e2f5dcb0600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f66756e2d6176616c616e6368652d66756a692d3100000000000000000000000060001b600655620493e0600760006101000a81548163ffffffff021916908363ffffffff160217905550604051806101400160405280610104815260200162002fad610104913960089081620000d19190620005e7565b50348015620000df57600080fd5b5033806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001a5906200072f565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620002355762000234816200023e60201b60201c565b5b505050620007c3565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002a690620007a1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ef57607f821691505b602082108103620004055762000404620003a7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000430565b6200047b868362000430565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c8620004c2620004bc8462000493565b6200049d565b62000493565b9050919050565b6000819050919050565b620004e483620004a7565b620004fc620004f382620004cf565b8484546200043d565b825550505050565b600090565b6200051362000504565b62000520818484620004d9565b505050565b5b8181101562000548576200053c60008262000509565b60018101905062000526565b5050565b601f821115620005975762000561816200040b565b6200056c8462000420565b810160208510156200057c578190505b620005946200058b8562000420565b83018262000525565b50505b505050565b600082821c905092915050565b6000620005bc600019846008026200059c565b1980831691505092915050565b6000620005d78383620005a9565b9150826002028217905092915050565b620005f2826200036d565b67ffffffffffffffff8111156200060e576200060d62000378565b5b6200061a8254620003d6565b620006278282856200054c565b600060209050601f8311600181146200065f57600084156200064a578287015190505b620006568582620005c9565b865550620006c6565b601f1984166200066f866200040b565b60005b82811015620006995784890151825560018201915060208501945060208101905062000672565b86831015620006b95784890151620006b5601f891682620005a9565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b600062000717601883620006ce565b91506200072482620006df565b602082019050919050565b600060208201905081810360008301526200074a8162000708565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600062000789601783620006ce565b9150620007968262000751565b602082019050919050565b60006020820190508181036000830152620007bc816200077a565b9050919050565b6080516127c7620007e6600039600081816101cb0152610d2001526127c76000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806379ba50971161006657806379ba5097146101495780638da5cb5b14610153578063aadbc98e14610171578063b1e217491461018f578063f2fde38b146101ad5761009e565b80630ca76175146100a35780633944ea3a146100bf57806348a7d26d146100dd5780634b0795a81461010d5780634d2e03a01461012b575b600080fd5b6100bd60048036038101906100b8919061178b565b6101c9565b005b6100c761028b565b6040516100d49190611895565b60405180910390f35b6100f760048036038101906100f29190611957565b610319565b60405161010491906119c6565b60405180910390f35b61011561042f565b6040516101229190611895565b60405180910390f35b6101336104bd565b6040516101409190611a36565b60405180910390f35b61015161054b565b005b61015b6106e0565b6040516101689190611a99565b60405180910390f35b610179610709565b6040516101869190611a36565b60405180910390f35b610197610742565b6040516101a491906119c6565b60405180910390f35b6101c760048036038101906101c29190611ae0565b610748565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024e576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61025983838361075c565b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a2505050565b6003805461029890611b3c565b80601f01602080910402602001604051908101604052809291908181526020018280546102c490611b3c565b80156103115780601f106102e657610100808354040283529160200191610311565b820191906000526020600020905b8154815290600101906020018083116102f457829003601f168201915b505050505081565b6000610323610816565b61032b61154f565b6103c86008805461033b90611b3c565b80601f016020809104026020016040519081016040528092919081815260200182805461036790611b3c565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050505050826108a690919063ffffffff16565b60008484905011156103f4576103f38484906103e49190611cc1565b826108b790919063ffffffff16565b5b61041c610400826108ff565b86600760009054906101000a900463ffffffff16600654610d1b565b6002819055506002549150509392505050565b6004805461043c90611b3c565b80601f016020809104026020016040519081016040528092919081815260200182805461046890611b3c565b80156104b55780601f1061048a576101008083540402835291602001916104b5565b820191906000526020600020905b81548152906001019060200180831161049857829003601f168201915b505050505081565b600980546104ca90611b3c565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611b3c565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290611d22565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280601d81526020017f446573706c6567616e646f206e75657374726f20636f6e747261746f2100000081525081565b60025481565b610750610816565b61075981610dfe565b50565b82600254146107a257826040517fd068bf5b00000000000000000000000000000000000000000000000000000000815260040161079991906119c6565b60405180910390fd5b81600390816107b19190611ef8565b5081600990816107c19190612025565b5080600490816107d19190611ef8565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50600960036004604051610809939291906121ff565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b90612297565b60405180910390fd5b565b6108b38260008084610f2a565b5050565b60008151036108f2576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808260a001819052505050565b6060600061090e610100610fd4565b90506109586040518060400160405280600c81526020017f636f64654c6f636174696f6e000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b61098183600001516002811115610972576109716122b7565b5b8261102490919063ffffffff16565b6109c96040518060400160405280600881526020017f6c616e677561676500000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b6109f2836040015160008111156109e3576109e26122b7565b5b8261102490919063ffffffff16565b610a3a6040518060400160405280600681526020017f736f75726365000000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610a51836060015182610ffb90919063ffffffff16565b60008360a00151511115610b0d57610aa76040518060400160405280600481526020017f617267730000000000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610ab081611074565b60005b8360a0015151811015610b0257610af18460a001518281518110610ada57610ad96122e6565b5b602002602001015183610ffb90919063ffffffff16565b80610afb90612344565b9050610ab3565b50610b0c8161109c565b5b60008360800151511115610c4e5760006002811115610b2f57610b2e6122b7565b5b83602001516002811115610b4657610b456122b7565b5b03610b7d576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc56040518060400160405280600f81526020017f736563726574734c6f636174696f6e000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610bee83602001516002811115610bdf57610bde6122b7565b5b8261102490919063ffffffff16565b610c366040518060400160405280600781526020017f736563726574730000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610c4d8360800151826110c490919063ffffffff16565b5b60008360c00151511115610d0a57610ca46040518060400160405280600981526020017f627974657341726773000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610cad81611074565b60005b8360c0015151811015610cff57610cee8460c001518281518110610cd757610cd66122e6565b5b6020026020010151836110c490919063ffffffff16565b80610cf890612344565b9050610cb0565b50610d098161109c565b5b806000015160000151915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663461d27628688600188886040518663ffffffff1660e01b8152600401610d809594939291906123d7565b6020604051808303816000875af1158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190612446565b9050807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e63906124bf565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6000815103610f65576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906002811115610f7d57610f7c6122b7565b5b90816002811115610f9157610f906122b7565b5b815250508184604001906000811115610fad57610fac6122b7565b5b90816000811115610fc157610fc06122b7565b5b8152505080846060018190525050505050565b610fdc6115c1565b610fea8160000151836110ed565b506000816020018181525050919050565b6110088260038351611166565b61101f81836000015161130f90919063ffffffff16565b505050565b61104660026005600660ff16901b17836000015161132b90919063ffffffff16565b50611070828260405160200161105c91906124ee565b6040516020818303038152906040526110c4565b5050565b61107f816004611395565b6001816020018181516110929190612509565b9150818152505050565b6110a7816007611395565b6001816020018181516110ba919061253d565b9150818152505050565b6110d18260028351611166565b6110e881836000015161130f90919063ffffffff16565b505050565b6110f56115e1565b600060208361110491906125a0565b146111305760208261111691906125a0565b6020611122919061253d565b8261112d9190612509565b91505b81836020018181525050604051808452600081528281016020018181101561115757600080fd5b80604052505082905092915050565b60178167ffffffffffffffff16116111a15761119b8160058460ff16901b60ff1617846000015161132b90919063ffffffff16565b5061130a565b60ff8167ffffffffffffffff16116111ff576111d4601860058460ff16901b17846000015161132b90919063ffffffff16565b506111f98167ffffffffffffffff16600185600001516113bb9092919063ffffffff16565b50611309565b61ffff8167ffffffffffffffff161161125e57611233601960058460ff16901b17846000015161132b90919063ffffffff16565b506112588167ffffffffffffffff16600285600001516113bb9092919063ffffffff16565b50611308565b63ffffffff8167ffffffffffffffff16116112bf57611294601a60058460ff16901b17846000015161132b90919063ffffffff16565b506112b98167ffffffffffffffff16600485600001516113bb9092919063ffffffff16565b50611307565b6112e0601b60058460ff16901b17846000015161132b90919063ffffffff16565b506113058167ffffffffffffffff16600885600001516113bb9092919063ffffffff16565b505b5b5b5b505050565b6113176115e1565b61132383838451611448565b905092915050565b6113336115e1565b60008360000151519050600060018261134c9190612509565b9050846020015182106113705761136f8560028361136a91906125d1565b61152b565b5b84516020838201018581538151831115611388578282525b5050849250505092915050565b6113b6601f60058360ff16901b17836000015161132b90919063ffffffff16565b505050565b6113c36115e1565b60008460000151519050600081846113db9190612509565b90508560200151811115611400576113ff866002836113fa91906125d1565b61152b565b5b60006001856101006114129190612746565b61141c919061253d565b905086518281018783198251161781528151841115611439578382525b50508693505050509392505050565b6114506115e1565b825182111561145e57600080fd5b60008460000151519050600083826114769190612509565b9050856020015181111561149b5761149a8660028361149591906125d1565b61152b565b5b600080875180518560208301019350808511156114b6578482525b60208901925050505b602086106114fd57805182526020826114d89190612509565b91506020816114e79190612509565b90506020866114f6919061253d565b95506114bf565b60006001876020036101000a0390508019825116818451168181178552505050879450505050509392505050565b60008260000151905061153e83836110ed565b50611549838261130f565b50505050565b6040518060e001604052806000600281111561156e5761156d6122b7565b5b815260200160006002811115611587576115866122b7565b5b815260200160008081111561159f5761159e6122b7565b5b8152602001606081526020016060815260200160608152602001606081525090565b60405180604001604052806115d46115e1565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116228161160f565b811461162d57600080fd5b50565b60008135905061163f81611619565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116988261164f565b810181811067ffffffffffffffff821117156116b7576116b6611660565b5b80604052505050565b60006116ca6115fb565b90506116d6828261168f565b919050565b600067ffffffffffffffff8211156116f6576116f5611660565b5b6116ff8261164f565b9050602081019050919050565b82818337600083830152505050565b600061172e611729846116db565b6116c0565b90508281526020810184848401111561174a5761174961164a565b5b61175584828561170c565b509392505050565b600082601f83011261177257611771611645565b5b813561178284826020860161171b565b91505092915050565b6000806000606084860312156117a4576117a3611605565b5b60006117b286828701611630565b935050602084013567ffffffffffffffff8111156117d3576117d261160a565b5b6117df8682870161175d565b925050604084013567ffffffffffffffff811115611800576117ff61160a565b5b61180c8682870161175d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611850578082015181840152602081019050611835565b60008484015250505050565b600061186782611816565b6118718185611821565b9350611881818560208601611832565b61188a8161164f565b840191505092915050565b600060208201905081810360008301526118af818461185c565b905092915050565b600067ffffffffffffffff82169050919050565b6118d4816118b7565b81146118df57600080fd5b50565b6000813590506118f1816118cb565b92915050565b600080fd5b600080fd5b60008083601f84011261191757611916611645565b5b8235905067ffffffffffffffff811115611934576119336118f7565b5b6020830191508360208202830111156119505761194f6118fc565b5b9250929050565b6000806000604084860312156119705761196f611605565b5b600061197e868287016118e2565b935050602084013567ffffffffffffffff81111561199f5761199e61160a565b5b6119ab86828701611901565b92509250509250925092565b6119c08161160f565b82525050565b60006020820190506119db60008301846119b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611a08826119e1565b611a1281856119ec565b9350611a22818560208601611832565b611a2b8161164f565b840191505092915050565b60006020820190508181036000830152611a5081846119fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a8382611a58565b9050919050565b611a9381611a78565b82525050565b6000602082019050611aae6000830184611a8a565b92915050565b611abd81611a78565b8114611ac857600080fd5b50565b600081359050611ada81611ab4565b92915050565b600060208284031215611af657611af5611605565b5b6000611b0484828501611acb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b5457607f821691505b602082108103611b6757611b66611b0d565b5b50919050565b600067ffffffffffffffff821115611b8857611b87611660565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611bb457611bb3611660565b5b611bbd8261164f565b9050602081019050919050565b6000611bdd611bd884611b99565b6116c0565b905082815260208101848484011115611bf957611bf861164a565b5b611c0484828561170c565b509392505050565b600082601f830112611c2157611c20611645565b5b8135611c31848260208601611bca565b91505092915050565b6000611c4d611c4884611b6d565b6116c0565b90508083825260208201905060208402830185811115611c7057611c6f6118fc565b5b835b81811015611cb757803567ffffffffffffffff811115611c9557611c94611645565b5b808601611ca28982611c0c565b85526020850194505050602081019050611c72565b5050509392505050565b6000611cce368484611c3a565b905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611d0c6016836119ec565b9150611d1782611cd6565b602082019050919050565b60006020820190508181036000830152611d3b81611cff565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611da47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d67565b611dae8683611d67565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000611df5611df0611deb84611dc6565b611dd0565b611dc6565b9050919050565b6000819050919050565b611e0f83611dda565b611e23611e1b82611dfc565b848454611d74565b825550505050565b600090565b611e38611e2b565b611e43818484611e06565b505050565b5b81811015611e6757611e5c600082611e30565b600181019050611e49565b5050565b601f821115611eac57611e7d81611d42565b611e8684611d57565b81016020851015611e95578190505b611ea9611ea185611d57565b830182611e48565b50505b505050565b600082821c905092915050565b6000611ecf60001984600802611eb1565b1980831691505092915050565b6000611ee88383611ebe565b9150826002028217905092915050565b611f0182611816565b67ffffffffffffffff811115611f1a57611f19611660565b5b611f248254611b3c565b611f2f828285611e6b565b600060209050601f831160018114611f625760008415611f50578287015190505b611f5a8582611edc565b865550611fc2565b601f198416611f7086611d42565b60005b82811015611f9857848901518255600182019150602085019450602081019050611f73565b86831015611fb55784890151611fb1601f891682611ebe565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f82111561202057611ff181611fca565b611ffa84611d57565b81016020851015612009578190505b61201d61201585611d57565b830182611e48565b50505b505050565b61202e826119e1565b67ffffffffffffffff81111561204757612046611660565b5b6120518254611b3c565b61205c828285611fdf565b600060209050601f83116001811461208f576000841561207d578287015190505b6120878582611edc565b8655506120ef565b601f19841661209d86611fca565b60005b828110156120c5578489015182556001820191506020850194506020810190506120a0565b868310156120e257848901516120de601f891682611ebe565b8355505b6001600288020188555050505b505050505050565b6000815461210481611b3c565b61210e81866119ec565b94506001821660008114612129576001811461213f57612172565b60ff198316865281151560200286019350612172565b61214885611fca565b60005b8381101561216a5781548189015260018201915060208101905061214b565b808801955050505b50505092915050565b6000815461218881611b3c565b6121928186611821565b945060018216600081146121ad57600181146121c3576121f6565b60ff1983168652811515602002860193506121f6565b6121cc85611d42565b60005b838110156121ee578154818901526001820191506020810190506121cf565b808801955050505b50505092915050565b6000606082019050818103600083015261221981866120f7565b9050818103602083015261222d818561217b565b90508181036040830152612241818461217b565b9050949350505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006122816016836119ec565b915061228c8261224b565b602082019050919050565b600060208201905081810360008301526122b081612274565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061234f82611dc6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361238157612380612315565b5b600182019050919050565b612395816118b7565b82525050565b600061ffff82169050919050565b6123b28161239b565b82525050565b600063ffffffff82169050919050565b6123d1816123b8565b82525050565b600060a0820190506123ec600083018861238c565b81810360208301526123fe818761185c565b905061240d60408301866123a9565b61241a60608301856123c8565b61242760808301846119b7565b9695505050505050565b60008151905061244081611619565b92915050565b60006020828403121561245c5761245b611605565b5b600061246a84828501612431565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006124a96017836119ec565b91506124b482612473565b602082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b6124e881611dc6565b82525050565b600060208201905061250360008301846124df565b92915050565b600061251482611dc6565b915061251f83611dc6565b925082820190508082111561253757612536612315565b5b92915050565b600061254882611dc6565b915061255383611dc6565b925082820390508181111561256b5761256a612315565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125ab82611dc6565b91506125b683611dc6565b9250826125c6576125c5612571565b5b828206905092915050565b60006125dc82611dc6565b91506125e783611dc6565b92508282026125f581611dc6565b9150828204841483151761260c5761260b612315565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561266a5780860481111561264657612645612315565b5b60018516156126555780820291505b808102905061266385612613565b945061262a565b94509492505050565b600082612683576001905061273f565b81612691576000905061273f565b81600181146126a757600281146126b1576126e0565b600191505061273f565b60ff8411156126c3576126c2612315565b5b8360020a9150848211156126da576126d9612315565b5b5061273f565b5060208310610133831016604e8410600b84101617156127155782820a9050838111156127105761270f612315565b5b61273f565b6127228484846001612620565b9250905081840481111561273957612738612315565b5b81810290505b9392505050565b600061275182611dc6565b915061275c83611dc6565b92506127897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612673565b90509291505056fea2646970667358221220462f2ff063d858b3602705f647de20649de6fe3695007694ee6c9d40f8eb893664736f6c63430008140033636f6e7374206368617261637465724964203d20617267735b305d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f73776170692e6465762f6170692f70656f706c652f247b63686172616374657249647d2f607d293b69662028617069526573706f6e73652e6572726f7229207b7468726f77204572726f72282752657175657374206661696c656427293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b72657475726e2046756e6374696f6e732e656e636f6465537472696e6728646174612e6e616d65293b",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806379ba50971161006657806379ba5097146101495780638da5cb5b14610153578063aadbc98e14610171578063b1e217491461018f578063f2fde38b146101ad5761009e565b80630ca76175146100a35780633944ea3a146100bf57806348a7d26d146100dd5780634b0795a81461010d5780634d2e03a01461012b575b600080fd5b6100bd60048036038101906100b8919061178b565b6101c9565b005b6100c761028b565b6040516100d49190611895565b60405180910390f35b6100f760048036038101906100f29190611957565b610319565b60405161010491906119c6565b60405180910390f35b61011561042f565b6040516101229190611895565b60405180910390f35b6101336104bd565b6040516101409190611a36565b60405180910390f35b61015161054b565b005b61015b6106e0565b6040516101689190611a99565b60405180910390f35b610179610709565b6040516101869190611a36565b60405180910390f35b610197610742565b6040516101a491906119c6565b60405180910390f35b6101c760048036038101906101c29190611ae0565b610748565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024e576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61025983838361075c565b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a2505050565b6003805461029890611b3c565b80601f01602080910402602001604051908101604052809291908181526020018280546102c490611b3c565b80156103115780601f106102e657610100808354040283529160200191610311565b820191906000526020600020905b8154815290600101906020018083116102f457829003601f168201915b505050505081565b6000610323610816565b61032b61154f565b6103c86008805461033b90611b3c565b80601f016020809104026020016040519081016040528092919081815260200182805461036790611b3c565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050505050826108a690919063ffffffff16565b60008484905011156103f4576103f38484906103e49190611cc1565b826108b790919063ffffffff16565b5b61041c610400826108ff565b86600760009054906101000a900463ffffffff16600654610d1b565b6002819055506002549150509392505050565b6004805461043c90611b3c565b80601f016020809104026020016040519081016040528092919081815260200182805461046890611b3c565b80156104b55780601f1061048a576101008083540402835291602001916104b5565b820191906000526020600020905b81548152906001019060200180831161049857829003601f168201915b505050505081565b600980546104ca90611b3c565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611b3c565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290611d22565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280601d81526020017f446573706c6567616e646f206e75657374726f20636f6e747261746f2100000081525081565b60025481565b610750610816565b61075981610dfe565b50565b82600254146107a257826040517fd068bf5b00000000000000000000000000000000000000000000000000000000815260040161079991906119c6565b60405180910390fd5b81600390816107b19190611ef8565b5081600990816107c19190612025565b5080600490816107d19190611ef8565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50600960036004604051610809939291906121ff565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b90612297565b60405180910390fd5b565b6108b38260008084610f2a565b5050565b60008151036108f2576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808260a001819052505050565b6060600061090e610100610fd4565b90506109586040518060400160405280600c81526020017f636f64654c6f636174696f6e000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b61098183600001516002811115610972576109716122b7565b5b8261102490919063ffffffff16565b6109c96040518060400160405280600881526020017f6c616e677561676500000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b6109f2836040015160008111156109e3576109e26122b7565b5b8261102490919063ffffffff16565b610a3a6040518060400160405280600681526020017f736f75726365000000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610a51836060015182610ffb90919063ffffffff16565b60008360a00151511115610b0d57610aa76040518060400160405280600481526020017f617267730000000000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610ab081611074565b60005b8360a0015151811015610b0257610af18460a001518281518110610ada57610ad96122e6565b5b602002602001015183610ffb90919063ffffffff16565b80610afb90612344565b9050610ab3565b50610b0c8161109c565b5b60008360800151511115610c4e5760006002811115610b2f57610b2e6122b7565b5b83602001516002811115610b4657610b456122b7565b5b03610b7d576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc56040518060400160405280600f81526020017f736563726574734c6f636174696f6e000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610bee83602001516002811115610bdf57610bde6122b7565b5b8261102490919063ffffffff16565b610c366040518060400160405280600781526020017f736563726574730000000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610c4d8360800151826110c490919063ffffffff16565b5b60008360c00151511115610d0a57610ca46040518060400160405280600981526020017f627974657341726773000000000000000000000000000000000000000000000081525082610ffb90919063ffffffff16565b610cad81611074565b60005b8360c0015151811015610cff57610cee8460c001518281518110610cd757610cd66122e6565b5b6020026020010151836110c490919063ffffffff16565b80610cf890612344565b9050610cb0565b50610d098161109c565b5b806000015160000151915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663461d27628688600188886040518663ffffffff1660e01b8152600401610d809594939291906123d7565b6020604051808303816000875af1158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190612446565b9050807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e63906124bf565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6000815103610f65576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906002811115610f7d57610f7c6122b7565b5b90816002811115610f9157610f906122b7565b5b815250508184604001906000811115610fad57610fac6122b7565b5b90816000811115610fc157610fc06122b7565b5b8152505080846060018190525050505050565b610fdc6115c1565b610fea8160000151836110ed565b506000816020018181525050919050565b6110088260038351611166565b61101f81836000015161130f90919063ffffffff16565b505050565b61104660026005600660ff16901b17836000015161132b90919063ffffffff16565b50611070828260405160200161105c91906124ee565b6040516020818303038152906040526110c4565b5050565b61107f816004611395565b6001816020018181516110929190612509565b9150818152505050565b6110a7816007611395565b6001816020018181516110ba919061253d565b9150818152505050565b6110d18260028351611166565b6110e881836000015161130f90919063ffffffff16565b505050565b6110f56115e1565b600060208361110491906125a0565b146111305760208261111691906125a0565b6020611122919061253d565b8261112d9190612509565b91505b81836020018181525050604051808452600081528281016020018181101561115757600080fd5b80604052505082905092915050565b60178167ffffffffffffffff16116111a15761119b8160058460ff16901b60ff1617846000015161132b90919063ffffffff16565b5061130a565b60ff8167ffffffffffffffff16116111ff576111d4601860058460ff16901b17846000015161132b90919063ffffffff16565b506111f98167ffffffffffffffff16600185600001516113bb9092919063ffffffff16565b50611309565b61ffff8167ffffffffffffffff161161125e57611233601960058460ff16901b17846000015161132b90919063ffffffff16565b506112588167ffffffffffffffff16600285600001516113bb9092919063ffffffff16565b50611308565b63ffffffff8167ffffffffffffffff16116112bf57611294601a60058460ff16901b17846000015161132b90919063ffffffff16565b506112b98167ffffffffffffffff16600485600001516113bb9092919063ffffffff16565b50611307565b6112e0601b60058460ff16901b17846000015161132b90919063ffffffff16565b506113058167ffffffffffffffff16600885600001516113bb9092919063ffffffff16565b505b5b5b5b505050565b6113176115e1565b61132383838451611448565b905092915050565b6113336115e1565b60008360000151519050600060018261134c9190612509565b9050846020015182106113705761136f8560028361136a91906125d1565b61152b565b5b84516020838201018581538151831115611388578282525b5050849250505092915050565b6113b6601f60058360ff16901b17836000015161132b90919063ffffffff16565b505050565b6113c36115e1565b60008460000151519050600081846113db9190612509565b90508560200151811115611400576113ff866002836113fa91906125d1565b61152b565b5b60006001856101006114129190612746565b61141c919061253d565b905086518281018783198251161781528151841115611439578382525b50508693505050509392505050565b6114506115e1565b825182111561145e57600080fd5b60008460000151519050600083826114769190612509565b9050856020015181111561149b5761149a8660028361149591906125d1565b61152b565b5b600080875180518560208301019350808511156114b6578482525b60208901925050505b602086106114fd57805182526020826114d89190612509565b91506020816114e79190612509565b90506020866114f6919061253d565b95506114bf565b60006001876020036101000a0390508019825116818451168181178552505050879450505050509392505050565b60008260000151905061153e83836110ed565b50611549838261130f565b50505050565b6040518060e001604052806000600281111561156e5761156d6122b7565b5b815260200160006002811115611587576115866122b7565b5b815260200160008081111561159f5761159e6122b7565b5b8152602001606081526020016060815260200160608152602001606081525090565b60405180604001604052806115d46115e1565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116228161160f565b811461162d57600080fd5b50565b60008135905061163f81611619565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116988261164f565b810181811067ffffffffffffffff821117156116b7576116b6611660565b5b80604052505050565b60006116ca6115fb565b90506116d6828261168f565b919050565b600067ffffffffffffffff8211156116f6576116f5611660565b5b6116ff8261164f565b9050602081019050919050565b82818337600083830152505050565b600061172e611729846116db565b6116c0565b90508281526020810184848401111561174a5761174961164a565b5b61175584828561170c565b509392505050565b600082601f83011261177257611771611645565b5b813561178284826020860161171b565b91505092915050565b6000806000606084860312156117a4576117a3611605565b5b60006117b286828701611630565b935050602084013567ffffffffffffffff8111156117d3576117d261160a565b5b6117df8682870161175d565b925050604084013567ffffffffffffffff811115611800576117ff61160a565b5b61180c8682870161175d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611850578082015181840152602081019050611835565b60008484015250505050565b600061186782611816565b6118718185611821565b9350611881818560208601611832565b61188a8161164f565b840191505092915050565b600060208201905081810360008301526118af818461185c565b905092915050565b600067ffffffffffffffff82169050919050565b6118d4816118b7565b81146118df57600080fd5b50565b6000813590506118f1816118cb565b92915050565b600080fd5b600080fd5b60008083601f84011261191757611916611645565b5b8235905067ffffffffffffffff811115611934576119336118f7565b5b6020830191508360208202830111156119505761194f6118fc565b5b9250929050565b6000806000604084860312156119705761196f611605565b5b600061197e868287016118e2565b935050602084013567ffffffffffffffff81111561199f5761199e61160a565b5b6119ab86828701611901565b92509250509250925092565b6119c08161160f565b82525050565b60006020820190506119db60008301846119b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611a08826119e1565b611a1281856119ec565b9350611a22818560208601611832565b611a2b8161164f565b840191505092915050565b60006020820190508181036000830152611a5081846119fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a8382611a58565b9050919050565b611a9381611a78565b82525050565b6000602082019050611aae6000830184611a8a565b92915050565b611abd81611a78565b8114611ac857600080fd5b50565b600081359050611ada81611ab4565b92915050565b600060208284031215611af657611af5611605565b5b6000611b0484828501611acb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b5457607f821691505b602082108103611b6757611b66611b0d565b5b50919050565b600067ffffffffffffffff821115611b8857611b87611660565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611bb457611bb3611660565b5b611bbd8261164f565b9050602081019050919050565b6000611bdd611bd884611b99565b6116c0565b905082815260208101848484011115611bf957611bf861164a565b5b611c0484828561170c565b509392505050565b600082601f830112611c2157611c20611645565b5b8135611c31848260208601611bca565b91505092915050565b6000611c4d611c4884611b6d565b6116c0565b90508083825260208201905060208402830185811115611c7057611c6f6118fc565b5b835b81811015611cb757803567ffffffffffffffff811115611c9557611c94611645565b5b808601611ca28982611c0c565b85526020850194505050602081019050611c72565b5050509392505050565b6000611cce368484611c3a565b905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611d0c6016836119ec565b9150611d1782611cd6565b602082019050919050565b60006020820190508181036000830152611d3b81611cff565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611da47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d67565b611dae8683611d67565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000611df5611df0611deb84611dc6565b611dd0565b611dc6565b9050919050565b6000819050919050565b611e0f83611dda565b611e23611e1b82611dfc565b848454611d74565b825550505050565b600090565b611e38611e2b565b611e43818484611e06565b505050565b5b81811015611e6757611e5c600082611e30565b600181019050611e49565b5050565b601f821115611eac57611e7d81611d42565b611e8684611d57565b81016020851015611e95578190505b611ea9611ea185611d57565b830182611e48565b50505b505050565b600082821c905092915050565b6000611ecf60001984600802611eb1565b1980831691505092915050565b6000611ee88383611ebe565b9150826002028217905092915050565b611f0182611816565b67ffffffffffffffff811115611f1a57611f19611660565b5b611f248254611b3c565b611f2f828285611e6b565b600060209050601f831160018114611f625760008415611f50578287015190505b611f5a8582611edc565b865550611fc2565b601f198416611f7086611d42565b60005b82811015611f9857848901518255600182019150602085019450602081019050611f73565b86831015611fb55784890151611fb1601f891682611ebe565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f82111561202057611ff181611fca565b611ffa84611d57565b81016020851015612009578190505b61201d61201585611d57565b830182611e48565b50505b505050565b61202e826119e1565b67ffffffffffffffff81111561204757612046611660565b5b6120518254611b3c565b61205c828285611fdf565b600060209050601f83116001811461208f576000841561207d578287015190505b6120878582611edc565b8655506120ef565b601f19841661209d86611fca565b60005b828110156120c5578489015182556001820191506020850194506020810190506120a0565b868310156120e257848901516120de601f891682611ebe565b8355505b6001600288020188555050505b505050505050565b6000815461210481611b3c565b61210e81866119ec565b94506001821660008114612129576001811461213f57612172565b60ff198316865281151560200286019350612172565b61214885611fca565b60005b8381101561216a5781548189015260018201915060208101905061214b565b808801955050505b50505092915050565b6000815461218881611b3c565b6121928186611821565b945060018216600081146121ad57600181146121c3576121f6565b60ff1983168652811515602002860193506121f6565b6121cc85611d42565b60005b838110156121ee578154818901526001820191506020810190506121cf565b808801955050505b50505092915050565b6000606082019050818103600083015261221981866120f7565b9050818103602083015261222d818561217b565b90508181036040830152612241818461217b565b9050949350505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006122816016836119ec565b915061228c8261224b565b602082019050919050565b600060208201905081810360008301526122b081612274565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061234f82611dc6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361238157612380612315565b5b600182019050919050565b612395816118b7565b82525050565b600061ffff82169050919050565b6123b28161239b565b82525050565b600063ffffffff82169050919050565b6123d1816123b8565b82525050565b600060a0820190506123ec600083018861238c565b81810360208301526123fe818761185c565b905061240d60408301866123a9565b61241a60608301856123c8565b61242760808301846119b7565b9695505050505050565b60008151905061244081611619565b92915050565b60006020828403121561245c5761245b611605565b5b600061246a84828501612431565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006124a96017836119ec565b91506124b482612473565b602082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b6124e881611dc6565b82525050565b600060208201905061250360008301846124df565b92915050565b600061251482611dc6565b915061251f83611dc6565b925082820190508082111561253757612536612315565b5b92915050565b600061254882611dc6565b915061255383611dc6565b925082820390508181111561256b5761256a612315565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125ab82611dc6565b91506125b683611dc6565b9250826125c6576125c5612571565b5b828206905092915050565b60006125dc82611dc6565b91506125e783611dc6565b92508282026125f581611dc6565b9150828204841483151761260c5761260b612315565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561266a5780860481111561264657612645612315565b5b60018516156126555780820291505b808102905061266385612613565b945061262a565b94509492505050565b600082612683576001905061273f565b81612691576000905061273f565b81600181146126a757600281146126b1576126e0565b600191505061273f565b60ff8411156126c3576126c2612315565b5b8360020a9150848211156126da576126d9612315565b5b5061273f565b5060208310610133831016604e8410600b84101617156127155782820a9050838111156127105761270f612315565b5b61273f565b6127228484846001612620565b9250905081840481111561273957612738612315565b5b81810290505b9392505050565b600061275182611dc6565b915061275c83611dc6565b92506127897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612673565b90509291505056fea2646970667358221220462f2ff063d858b3602705f647de20649de6fe3695007694ee6c9d40f8eb893664736f6c63430008140033",
  "devdoc": {
    "details": "This contract uses hardcoded values and should not be used in production.",
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "sendRequest(uint64,string[])": {
        "params": {
          "args": "The arguments to pass to the HTTP request",
          "subscriptionId": "The ID for the Chainlink subscription"
        },
        "returns": {
          "requestId": "The ID of the request"
        }
      }
    },
    "title": "GettingStartedFunctionsConsumer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Initializes the contract with the Chainlink router address and sets the contract owner"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "sendRequest(uint64,string[])": {
        "notice": "Sends an HTTP request for character information"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "notice": "This is an example contract to show how to make HTTP requests using Chainlink",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2289,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2291,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2293,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "s_lastError",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2310,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "router",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2313,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "donID",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 2316,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "gasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 2319,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "source",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2321,
        "contract": "contracts/GettingStartedFunctionsConsumer.sol:GettingStartedFunctionsConsumer",
        "label": "character",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}